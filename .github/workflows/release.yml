name: Release
on:
  - release
permissions:
  contents: read 
  security-events: write
  actions: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '21'

      - name : Set executable permissions for maven
        run: chmod +x ./mvnw

      - name: Extract version from tag
        id: extract_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
  
      - name: Update Maven Version
        run: mvn versions:set -DnewVersion=${{ steps.extract_version.outputs.version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Execute maven install
        run: ./mvnw clean install

      - name: Build native application
        run: ./mvnw package -Pnative

      - name: Build and push multi-arch Docker images
        run: |
          docker buildx create --name multiarch --use || true
          
          # Build and push JVM image
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f src/main/docker/Dockerfile.jvm \
            -t arnaudroubinet/krabotnotif:latest \
            -t arnaudroubinet/krabotnotif:${{ github.event.release.tag_name }} \
            --push .

          # Build and push native image
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f src/main/docker/Dockerfile.native \
            -t arnaudroubinet/krabotnotif:latest-native \
            -t arnaudroubinet/krabotnotif:${{ github.event.release.tag_name }}-native \
            --push .

      - name: Check for changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes_detected=true" >> $GITHUB_ENV
            echo "Changes detected. Proceeding to build and test."
          else
            echo "changes_detected=false" >> $GITHUB_ENV
            echo "No changes detected. Exiting."
            exit 0
          fi

      - name: Commit changes
        if: env.changes_detected == 'true'
        run: |
          git add .
          git commit -m "Set project version to ${{ steps.extract_version.outputs.version }}"
          git push

      - name: Run Trivy vulnerability scanner for JVM image
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: 'arnaudroubinet/krabotnotif:${{ github.event.release.tag_name }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-jvm.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner for native image
        uses: aquasecurity/trivy-action@0.46.0
        with:
          image-ref: 'arnaudroubinet/krabotnotif:${{ github.event.release.tag_name }}-native'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-native.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy JVM scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-jvm.sarif'
          category: jvm-image

      - name: Upload Trivy native scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-native.sarif'
          category: native-image
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-native.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Update personal instance by calling his update webhook
        run: |
          curl -X POST "${{ secrets.INSTANCE_TO_UPDATE_WEBHOOK }}"
