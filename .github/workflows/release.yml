name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual triggering of the workflow
permissions:
  contents: write
  security-events: write
  actions: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '21'

      - name: Set executable permissions for maven
        run: chmod +x ./mvnw

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Execute maven install
        run: ./mvnw clean install

      - name: Build native application
        run: ./mvnw package -Pnative

      - name: Build and push multi-arch Docker images
        run: |
          docker buildx create --name multiarch --use || true
          
          # Build and push JVM image
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f src/main/docker/Dockerfile.jvm \
            -t arnaudroubinet/krabotnotif:latest \
            -t arnaudroubinet/krabotnotif:${GITHUB_REF#refs/tags/} \
            --push .

          # Build and push native image
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f src/main/docker/Dockerfile.native \
            -t arnaudroubinet/krabotnotif:latest-native \
            -t arnaudroubinet/krabotnotif:${GITHUB_REF#refs/tags/}-native \
            --push .

      - name: Run Trivy vulnerability scanner for JVM image
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: 'arnaudroubinet/krabotnotif:${GITHUB_REF#refs/tags/}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-jvm.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner for native image
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: 'arnaudroubinet/krabotnotif:${GITHUB_REF#refs/tags/}-native'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-native.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy JVM scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-jvm.sarif'
          category: jvm-image

      - name: Upload Trivy native scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-native.sarif'
          category: native-image
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-native.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"

          # Check if release already exists
          if gh release view "$TAG_NAME" &>/dev/null; then
            echo "Release $TAG_NAME already exists, skipping creation"
          else
            echo "Creating release $TAG_NAME"
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --generate-notes
          fi
