name: Increment Version, Tag and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  security-events: write
  actions: read

jobs:
  increment-and-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set executable permissions for maven
        run: chmod +x ./mvnw

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag that follows semantic versioning (vX.Y.Z format)
          # Filter out malformed tags like v.X.Y.Z
          LATEST_TAG=$(git tag -l "v*" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate new version
        id: calculate_version
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          # Remove 'v' prefix
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Validate that version parts are not empty and are numeric
          if [[ -z "$MAJOR" ]] || ! [[ "$MAJOR" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid MAJOR version component: '$MAJOR'"
            echo "LATEST_TAG was: $LATEST_TAG"
            echo "VERSION after removing v: $VERSION"
            exit 1
          fi
          if [[ -z "$MINOR" ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid MINOR version component: '$MINOR'"
            echo "LATEST_TAG was: $LATEST_TAG"
            echo "VERSION after removing v: $VERSION"
            exit 1
          fi
          if [[ -z "$PATCH" ]] || ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid PATCH version component: '$PATCH'"
            echo "LATEST_TAG was: $LATEST_TAG"
            echo "VERSION after removing v: $VERSION"
            exit 1
          fi
          
          # Increment based on input
          case "${{ github.event.inputs.version_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          echo "New tag: $NEW_TAG"

      - name: Update Maven Version
        run: ./mvnw versions:set -DnewVersion="${{ steps.calculate_version.outputs.new_version }}"

      - name: Commit version change
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add pom.xml
          git commit -m "Bump version to ${{ steps.calculate_version.outputs.new_version }}"
          git push origin HEAD

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          NEW_TAG="${{ steps.calculate_version.outputs.new_tag }}"
          
          # Check if tag already exists
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "⚠️ Tag $NEW_TAG already exists, deleting it first"
            git tag -d "$NEW_TAG"
            git push origin ":refs/tags/$NEW_TAG" || echo "Tag doesn't exist on remote"
          fi
          
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"
          
          echo "✅ Created and pushed tag: $NEW_TAG"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Execute maven install
        run: ./mvnw clean install

      - name: Build native application
        run: ./mvnw package -Pnative

      - name: Build and push multi-arch Docker images
        run: |
          NEW_TAG="${{ steps.calculate_version.outputs.new_tag }}"
          docker buildx create --name multiarch --use || true
          
          # Build and push JVM image
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f src/main/docker/Dockerfile.jvm \
            -t arnaudroubinet/krabotnotif:latest \
            -t arnaudroubinet/krabotnotif:$NEW_TAG \
            --push .

          # Build and push native image
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f src/main/docker/Dockerfile.native \
            -t arnaudroubinet/krabotnotif:latest-native \
            -t arnaudroubinet/krabotnotif:$NEW_TAG-native \
            --push .

      - name: Run Trivy vulnerability scanner for JVM image
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: 'arnaudroubinet/krabotnotif:${{ steps.calculate_version.outputs.new_tag }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-jvm.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner for native image
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: 'arnaudroubinet/krabotnotif:${{ steps.calculate_version.outputs.new_tag }}-native'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-native.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy JVM scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results-jvm.sarif'
          category: jvm-image

      - name: Upload Trivy native scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results-native.sarif'
          category: native-image

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ steps.calculate_version.outputs.new_tag }}"

          # Check if release already exists
          if gh release view "$TAG_NAME" &>/dev/null; then
            echo "Release $TAG_NAME already exists, skipping creation"
          else
            echo "Creating release $TAG_NAME"
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --generate-notes
          fi
